<!DOCTYPE html>
<html lang="ja">
<head>
<title>カメラ映像を受信</title>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body>
<h2>カメラ映像を受信</h2>
<video id="video" controls autoplay></video>
<script>
  const video = document.getElementById('video');
  const mediaSource = new MediaSource();
  video.src = URL.createObjectURL(mediaSource);
  let sourceBuffer;
  let stack = [];

  mediaSource.addEventListener('sourceopen', sourceOpenHandler, false);

  function sourceOpenHandler() {
    sourceBuffer = mediaSource.addSourceBuffer('video/webm; codecs="vp9"');
    console.log('MediaSource opened, sourceBuffer created.');

    const websocket = new WebSocket('wss://ls-research-project-1.glitch.me/websocket3');
    websocket.binaryType = 'arraybuffer';

    websocket.onopen = function() {
      console.log('WebSocket connection opened.');
      websocket.send(JSON.stringify({ status: 'receiver' }));
    };

    websocket.onmessage = function(event) {
      console.log('WebSocket message received, stacking data.');
      if (mediaSource.readyState === 'open') {
        stack.push(new Uint8Array(event.data)); // データをスタックに追加
        if (!sourceBuffer.updating) {
          appendNextBuffer();
        }
      } else {
        console.log('MediaSource is not open:', mediaSource.readyState);
      }
    };

    sourceBuffer.addEventListener('updateend', () => {
      console.log('SourceBuffer update ended, readyState:', mediaSource.readyState);
      appendNextBuffer();
    });

    sourceBuffer.addEventListener('error', (e) => {
      console.error('SourceBuffer error:', e);
      console.log(`Error details: Mode: ${sourceBuffer.mode}, Updating: ${sourceBuffer.updating}, TimestampOffset: ${sourceBuffer.timestampOffset}, Buffered: ${sourceBuffer.buffered.length}`);
    });
  }

  function appendNextBuffer() {
    if (stack.length > 0 && !sourceBuffer.updating) {
      console.log('Appending buffer to SourceBuffer');
      sourceBuffer.appendBuffer(stack.pop()); // スタックからデータを取り出して追加
    } else {
      console.log('SourceBuffer is updating or stack is empty');
    }
  }
</script>
</body>
</html>

